% \iffalse meta-comment
%
% Copyright (C) 2019 by Geng Nan <nangeng@nwsuaf.edu.cn>
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either
% version 1.3 of this license or (at your option) any later
% version.  The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of
% LaTeX version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[2011/06/27]
%<package>\ProvidesPackage{tikz-flowchart}
%<package>  [2019/08/20 v1.0.01 draw flowchart using TikZ]
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\RecordChanges

\usepackage[UTF8,scheme=chinese]{ctex}
\usepackage{csquotes}
\usepackage{lmodern}
\usepackage{hyperref}
\usepackage{url}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage[debug]{tikz-flowchart}
\usepackage{float}
% \usepackage{parskip}

\renewcommand\figureautorefname\figurename
\renewcommand\tableautorefname\tablename

% default position for floats: H
\makeatletter
\renewcommand{\fps@figure}{H}
\renewcommand{\fps@table}{H}
\makeatother

%\setlength{\parindent}{0pt}

\def\pkg{\texttt{tikz-flowchart}}
\def\tkz{Ti\emph{k}Z}

\begin{document}
  \DocInput{tikz-flowchart.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \changes{v1.0.01}{2019/08/20}{chang .sty file to .dtx file}
%
% \GetFileInfo{tikz-flowchart.sty}
%
% \title{\texttt{tikz-flowchart}---\tkz 流程图绘制宏包\thanks{该文档是 \texttt{tikz-flowchart}~\fileversion, dated~\filedate 的说明文档。}}
% \author{耿楠\thanks{https://github.com/registor/tikz-flowchart}\\ 西北农林科技大学信息工程学院计算机科学系}
% \date{\filedate}
% \thispagestyle{empty}
% \maketitle
%
% \begin{abstract}
%   这是一个使用\tkz 绘制传统程序流程图的简单宏包，通过定义\texttt{proc}、\texttt{test}、\texttt{io}、\texttt{term}等\tkz 的\texttt{node}命令样式实现。
% 该宏包核心代码摘录自\href{http://www.texample.net/tikz/examples/author/brent-longborough/}{Brent Longborough}设计的流程图绘制样例，
% 参考了\texttt{tikz-imagelabels}宏包的设计思路，提供了\texttt{\textbackslash flowchartset}命令以设置绘制参数。
% \end{abstract}
%
% \tableofcontents
%
% \PrintChanges
%
% \StopEventually{}
%
% \section{宏包简介}
%
% 流程图是诸如手册、报告、论文等文档中经常用到的排版元素，\pkg{}宏包的
% 目的是为了更为方便地实现传统流程图的绘制。\autoref{fig:forloop}是使
% 用\pkg{} 宏包绘制|for|循环结构的一个简单示例。
%
% \begin{figure}[!htp]
%   \centering
%   \begin{tikzpicture}[scale=0.85]
%     \node [proc] (p1) {表达式1};      
%     \node [test, join] (t1) {表达式2?};
%     \node [proc] (p2) {循环体};
%     \node [proc, join] (p3) {表达式3};
%
%     \node [coord, above = 0.5 of p1] (c1)  {};
%     \node [coord] (c2) at ($(p1)!0.35!(t1)$)  {};
%     \node [coord, below = 0.25 of p3] (c3)  {};
%     \node [coord, below = 0.2 of c3] (c4) {};
%     \node [coord, below = 0.5 of c4] (c5) {};
%     \node [coord, right = 0.5 of t1] (c6) {};
%     \node [coord, left = 0.5 of t1] (ct) {};
%     \node [coord] (c7) at (c3 -| ct)  {};
% 
%     \path (t1.south) -- node [near start, right] {$Y$} (p2.north);
%     \draw [norm] (t1.south) -- (p2.north);
%     \path (t1.east) -- node [near start, above] {$N$} (c6);
%     \draw [norm] (t1.east) -- (c6) |- (c4) -- (c5);
%
%     \draw [norm] (c1) -- (p1);
%     \draw [norm] (p3.south) |- (c7) |- (c2);
%   \end{tikzpicture}
%   \caption{for循环流程图}
%   \label{fig:forloop}
% \end{figure}
%
% \autoref{fig:forloop}由如下代码绘制:
% \begin{verbatim}
% \begin{tikzpicture}[scale=0.85]
%   % 布置结点
%   \node [proc] (p1) {表达式1};      
%   \node [test, join] (t1) {表达式2?};
%   \node [proc] (p2) {循环体};
%   \node [proc, join] (p3) {表达式3};
%   % 布置用于连接的坐标结点，同时为其布置调试标记点。
%   \node [coord, above = 0.5 of p1] (c1)  {}; \cmark{1}
%   \node [coord] (c2) at ($(p1)!0.35!(t1)$)  {}; \cmark{2}
%   \node [coord, below = 0.25 of p3] (c3)  {}; \cmark{3}
%   \node [coord, below = 0.2 of c3] (c4) {}; \cmark{4}
%   \node [coord, below = 0.5 of c4] (c5) {}; \cmark{5}
%   \node [coord, right = 0.5 of t1] (c6) {}; \cmark{6}
%   \node [coord, left = 0.5 of t1] (ct) {}; \cmark{t}
%   \node [coord] (c7) at (c3 -| ct)  {}; \cmark{7}
%   % 判断框连线，每次绘制时，先绘制一个带有一个固定
%   % 位置标注的路径(path)，然后再绘制箭头本身(arrow)。
%   \path (t1.south) -- node [near start, right] {$Y$} (p2.north);
%   \draw [norm] (t1.south) -- (p2.north);
%   \path (t1.east) -- node [near start, above] {$N$} (c6);
%   \draw [norm] (t1.east) -- (c6) |- (c4) -- (c5);
%   % 其它连线
%   \draw [norm] (c1) -- (p1);
%   \draw [norm] (p3.south) |- (c7) |- (c2);
% \end{tikzpicture}
% \end{verbatim}
%
% \emph{注意：}所有绘图代码都需在|tikzpicture|环境中完成。
% \section{使用方法}
% \subsection{载入宏包}
% 在导言区使用：\texttt{\textbackslash annotationimage}\oarg{debug}\marg{\pkg{}}命令
% 载入宏包。如果带有\oarg{debug}参数，则可以绘制用于调试的流程线转角点
% 标记，否则，则不绘制该标记，\autoref{fig:forloopcmark}是带有
% \oarg{debug}参数时的绘制结果。

% \begin{figure}[!htp]
%   \centering
%   \begin{tikzpicture}[scale=0.85]
%     \node [proc] (p1) {表达式1};      
%     \node [test, join] (t1) {表达式2?};
%     \node [proc] (p2) {循环体};
%     \node [proc, join] (p3) {表达式3};
%
%     \node [coord, above = 0.5 of p1] (c1)  {}; \cmark{1}
%     \node [coord] (c2) at ($(p1)!0.35!(t1)$)  {}; \cmark{2}
%     \node [coord, below = 0.25 of p3] (c3)  {}; \cmark{3}
%     \node [coord, below = 0.2 of c3] (c4) {}; \cmark{4}
%     \node [coord, below = 0.5 of c4] (c5) {}; \cmark{5}
%     \node [coord, right = 0.5 of t1] (c6) {}; \cmark{6}
%     \node [coord, left = 0.5 of t1] (ct) {}; \cmark{t}
%     \node [coord] (c7) at (c3 -| ct)  {}; \cmark{7}
% 
%     \path (t1.south) -- node [near start, right] {$Y$} (p2.north);
%     \draw [norm] (t1.south) -- (p2.north);
%     \path (t1.east) -- node [near start, above] {$N$} (c6);
%     \draw [norm] (t1.east) -- (c6) |- (c4) -- (c5);
%
%     \draw [norm] (c1) -- (p1);
%     \draw [norm] (p3.south) |- (c7) |- (c2);
%   \end{tikzpicture}
%   \caption{for循环流程图}
%   \label{fig:forloopcmark}
% \end{figure}
% \subsection{布置结点}
% 使用类似``\verb|\node [proc](p1){表达式1};|''\tkz{} 绘图命令，采用\pkg{}
% 定义的``\verb|proc|''、``\verb|test|''、``\verb|io|''或
% ``\verb|term|''的\enquote{node样式}参数布置需要的流程框结点。
%
% 在布置结点时，如果前一个结点不是``\verb|test|''样式，则可以使用
% ``\verb|join|''参数自动与前一个结点建立连接，如
% ``\verb|\node [proc, join] (p3) {表达式3};|''，同时绘制对应流程线。
%
% 另外，可以根据需要同时对布置的结点进行命名(如``\verb|p1|''、
% ``\verb|t1|''等)，以便后续对该结点进行引用。
%
% \subsection{布置坐标点}
% 使用类似``\verb|\node [coord, above = 0.5 of p1] (c1)  {}; \cmark{1}|''
% \tkz{} 绘图命令，采用\pkg{}
% 定义的``\verb|coord|''的样式参数布置其它需要的坐标点
% (用于流程线的转接)。同时，也可以使用``\verb|cmark|''命令为该点作出标
% 记，以方便调试流程线连线。该标记在使用``\verb|debug|''可选参数引入
% ``\verb|\usepackage[debug]{tikz-flowchart}|''宏包时，将绘制这些标记
% 点，若引入宏包时无``\verb|debug|''可选参数，则不绘制该标记点。
%
% \subsection{绘制流程线}
% 首先使用类似``\verb|\path(t1.south)--node[near start,right]{$Y$}(p2.north);|''
% 的路径命令绘制流程线标注。
%
% 然后使用类似``\verb!\draw[norm](t1.east)--(c6)|-(c4)--(c5);!''
% 绘制命令绘制带有箭头的流程线。
%
% \subsection{绘制流程线}
% 首先使用类似``\verb|\path(t1.south)--node[near start,right]{$Y$}(p2.north);|''
% 的路径命令绘制流程线标注。
%
% 然后使用类似``\verb!\draw[norm](t1.east)--(c6)|-(c4)--(c5);!''
% 绘制命令绘制带有箭头的流程线。
%
% 在绘制流程线时，可以使用``\verb|lnorm|''、``\verb|lfree|''或
% ``\verb|lcong|''指定颜色的样式绘制无箭头的流程线，用``\verb|norm|''、
% ``\verb|free|''或``\verb|cong|''指定颜色的样式绘制有箭头的流程线。
%
% 建立先绘制南北方向流程线，再绘制东西方向流程线。
%
% 在绘制流程线时，可以使用``\verb|dotnorm|''、``\verb|dotfree|''和
% ``\verb|dotcong|''样式绘制流程线实心交点，用``\verb|cdotnorm|''、
% ``\verb|cdotfree|''或``\verb|cdotcong|''样式绘制流程线空心交点。
%
% 对于不相交的流程线，可以用``\verb|connect|''样式进行绘制。
%
% \subsection{其它命令}
% 可以使用任何合法的\tkz{}命令为流程图绘制需要的图形。
%
% \section{参数设置}
%
% \subsection{全局设置}
% 可以在导言区使用\verb|\flowchartset{}|命令设置需要的绘图全局设置。
%
% \begin{verbatim}
% \flowchartset{
%   free color = green,                % 自由连线颜色(默认取green)
%   norm color = blue,                 % 常规连线颜色(默认取blue)
%   cong color = red,                  % 关联连线颜色(默认取red)
%   proc fill color = white,           % 顺序处理框填充颜色(默认取白色)
%   test fill color = white,           % 判断框填充颜色(默认取白色)
%   io fill color = white,             % 输入/输出框填充颜色(默认取白色)
%   term fill color = white,           % 开始/结束框填充颜色(默认取白色)
%   proc text width = 8em,             % 顺序处理框宽度(默认取8em)
%   test text width = 5em,             % 判断框宽度(默认取5em)
%   io text width = 6em,               % 输入/输出框宽度(默认取6em)
%   term text width = 3em,             % 开始/结束宽度(默认取3em)
%   chain direction = below,           % 结点自动布置方向(默认取below)
%   minimum node distance = 6mm,       % 最小结点间距(默认取6mm)
%   maximum node distance = 60mm,      % 最大结点间距(默认取60mm)
%   border line width = \pgflinewidth, % 流程框边框宽度(默认取当前线条宽度)
%   flow line width = \pgflinewidth,   % 流程线线条宽度(默认取当前线条宽度)
%   stealth length = 1.5mm,            % 箭头长度(默认取1.5mm)
%   stealth width = 1.0mm,             % 箭头宽度(默认取1.0mm)
% }
% \end{verbatim}
%
% 在进行参数设置时，可以仅指定需要的参数，如：
% \begin{verbatim}
% \flowchartset{
%   free color = green,                % 自由连线颜色(默认取green)
%   norm color = black,                 % 常规连线颜色(默认取blue)
%   cong color = red,                  % 关联连线颜色(默认取red)
% }
% \end{verbatim}
%
% 可以指定``\verb|norm|''类型的颜色为``\verb|black|''，可以得到
% \autoref{fig:forloopblack}所示的黑色流程线流程图。
%
% \flowchartset{
%   free color = green,
%   norm color = black,
%   cong color = red,
% }
%   
% \begin{figure}[!htp]
%   \centering
%   \begin{tikzpicture}[scale=0.85]
%     \node [proc] (p1) {表达式1};      
%     \node [test, join] (t1) {表达式2?};
%     \node [proc] (p2) {循环体};
%     \node [proc, join] (p3) {表达式3};
%
%     \node [coord, above = 0.5 of p1] (c1)  {};
%     \node [coord] (c2) at ($(p1)!0.35!(t1)$)  {};
%     \node [coord, below = 0.25 of p3] (c3)  {};
%     \node [coord, below = 0.2 of c3] (c4) {};
%     \node [coord, below = 0.5 of c4] (c5) {};
%     \node [coord, right = 0.5 of t1] (c6) {};
%     \node [coord, left = 0.5 of t1] (ct) {};
%     \node [coord] (c7) at (c3 -| ct)  {};
% 
%     \path (t1.south) -- node [near start, right] {$Y$} (p2.north);
%     \draw [norm] (t1.south) -- (p2.north);
%     \path (t1.east) -- node [near start, above] {$N$} (c6);
%     \draw [norm] (t1.east) -- (c6) |- (c4) -- (c5);
%
%     \draw [norm] (c1) -- (p1);
%     \draw [norm] (p3.south) |- (c7) |- (c2);
%   \end{tikzpicture}
%   \caption{for循环流程图}
%   \label{fig:forloopblack}
% \end{figure}
%
% \subsection{局部设置}
% 也可以在需要的位置使用\verb|\flowchartset{}|命令进行需要的绘图局部设
% 置。例如，可以使用如下代码绘制如\autoref{fig:colorflowchart}所示的彩
% 色流程图。
%
% \begin{verbatim}
% \flowchartset{
%   proc fill color = orange!10,
%   test fill color = green!30,
%   io fill color = blue!30,
%   term fill color = red!30,
%   proc text width = 6em,
%   test text width = 10em,
% }
%   
% \begin{figure}[!htp]
%   \centering
%   \begin{tikzpicture}
%     % 布置结点单元
%     \node [term] (st) {开始};
%     \node [proc, join] (p1) {\verb|int divisor|};       
%     \node [test, join] (t1) {\verb|n <= 1|};
%     \node [proc] (p2) {\verb|divisor = 2|};
%     \node [test, join] (t2) {\verb|divisor * divisor <= n|};
%     \node [test] (t3) {\verb|n % divisor == 0|};
%     \node [proc] (p3) {\verb|divisor++|};
%     \node [term, below = 1.6 of p3] (end) {结束};
%     \node [proc, left = 4.8 of t2] (p4) {\verb|return 0|};
%     \node [proc, right = 3.5 of p3] (p5) {\verb|return 0|};
%     \node [proc, right = 5.8 of t3] (p6) {\verb|return 1|};
%
%     % 布置用于连接的坐标结点，同时为其布置调试标记点。
%     \node [coord] (c1) at ($(p2.south)!0.5!(t2.north)$)  {};
%     \node [coord, below = 0.25 of p3] (c2)  {};
%     \node [coord, above = 0.5 of end] (c3) {};
%     \node [coord, left = 0.5 of t2] (ct) {};
%     \node [coord] (c4) at (c3 -| p5)  {};
%     \node [coord] (c5) at (c2 -| ct)  {};
%        
%     % 判断框连线，每次绘制时，先绘制一个带有一个固定
%     % 位置标注的路径(path)，然后再绘制箭头本身(arrow)。
%     \path (t1.south) -- node [near start, right] {$N$} (p2.north);
%     \draw [norm] (t1.south) -- (p2.north);
%     \path (t1.west) -| node [near start, above] {$Y$} (p4.north);
%     \draw [norm] (t1.west) -| (p4.north);
%      
%     \path (t2.south) -- node [near start, right] {$Y$} (t3.north);
%     \draw [norm] (t2.south) -- (t3.north);
%     \path (t2.east) -| node [near start, above] {$N$} (p6.north);
%     \draw [norm] (t2.east) -| (p6.north);
%        
%     \path (t3.south) -- node [near start, right] {$N$} (p3.north);
%     \draw [norm] (t3.south) -- (p3.north);
%     \path (t3.east) -| node [near start, above] {$Y$} (p5.north);
%     \draw [norm] (t3.east) -| (p5.north);
%  
%     % 其它连线
%     \draw [norm](p3.south) |- (c5) |- (c1);
%     \draw [norm](p4.south) |- (c3);
%     \draw [norm](p4.south) |- (c3) -- (end);
%     \draw [norm](p5.south) -- (c4);
%     \draw [norm](p6.south) |- (c3);
%     \draw [norm](p6.south) |- (c3) -- (end);
%   \end{tikzpicture}
%   \caption{素数判定流程图}
%   \label{fig:colorflowchart}
% \end{figure}
% \end{verbatim}
%
% \flowchartset{
%   proc fill color = orange!10,
%   test fill color = green!30,
%   io fill color = blue!30,
%   term fill color = red!30,
%   proc text width = 6em,
%   test text width = 10em,
% }
%   
% \begin{figure}[!htp]
%   \centering
%   \begin{tikzpicture}[scale=0.5]
%     % 布置结点单元
%     \node [term] (st) {开始};
%     \node [proc, join] (p1) {\verb|int divisor|};       
%     \node [test, join] (t1) {\verb|n <= 1|};
%     \node [proc] (p2) {\verb|divisor = 2|};
%     \node [test, join] (t2) {\verb|divisor * divisor <= n|};
%     \node [test] (t3) {\verb|n % divisor == 0|};
%     \node [proc] (p3) {\verb|divisor++|};
%     \node [term, below = 1.6 of p3] (end) {结束};
%     \node [proc, left = 4.8 of t2] (p4) {\verb|return 0|};
%     \node [proc, right = 3.5 of p3] (p5) {\verb|return 0|};
%     \node [proc, right = 5.8 of t3] (p6) {\verb|return 1|};
%
%     % 布置用于连接的坐标结点，同时为其布置调试标记点。
%     \node [coord] (c1) at ($(p2.south)!0.5!(t2.north)$)  {};
%     \node [coord, below = 0.25 of p3] (c2)  {};
%     \node [coord, above = 0.5 of end] (c3) {};
%     \node [coord, left = 0.5 of t2] (ct) {};
%     \node [coord] (c4) at (c3 -| p5)  {};
%     \node [coord] (c5) at (c2 -| ct)  {};
%        
%     % 判断框连线，每次绘制时，先绘制一个带有一个固定
%     % 位置标注的路径(path)，然后再绘制箭头本身(arrow)。
%     \path (t1.south) -- node [near start, right] {$N$} (p2.north);
%     \draw [norm] (t1.south) -- (p2.north);
%     \path (t1.west) -| node [near start, above] {$Y$} (p4.north);
%     \draw [norm] (t1.west) -| (p4.north);
%      
%     \path (t2.south) -- node [near start, right] {$Y$} (t3.north);
%     \draw [norm] (t2.south) -- (t3.north);
%     \path (t2.east) -| node [near start, above] {$N$} (p6.north);
%     \draw [norm] (t2.east) -| (p6.north);
%        
%     \path (t3.south) -- node [near start, right] {$N$} (p3.north);
%     \draw [norm] (t3.south) -- (p3.north);
%     \path (t3.east) -| node [near start, above] {$Y$} (p5.north);
%     \draw [norm] (t3.east) -| (p5.north);
%
%     % 其它连线
%     \draw [norm](p3.south) |- (c5) |- (c1);
%     \draw [norm](p4.south) |- (c3);
%     \draw [norm](p4.south) |- (c3) -- (end);
%     \draw [norm](p5.south) -- (c4);
%     \draw [norm](p6.south) |- (c3);
%     \draw [norm](p6.south) |- (c3) -- (end);
%   \end{tikzpicture}
%   \caption{for循环流程图}
%   \label{fig:colorflowchart}
% \end{figure}
%
% \subsection{使用\tkz{}命令和参数}
% 所有合法的\tkz{}命令和参数都可以应用于|tikzpicture|绘图环境中。
%
% \section{代码实现}
% 该宏包仅需要载入|tikz|和|xifthen|宏包，如果这些宏包没有载入，则自
% 动载入这些宏包。
%    \begin{macrocode}
\RequirePackage{tikz}
\RequirePackage{xifthen}
%
%    \end{macrocode}
% \subsection{宏包选项}
% 使用 \pkg{kvoptions} 来处理传给该宏包的参数。
%    \begin{macrocode}
\RequirePackage{kvoptions}
\SetupKeyvalOptions{
  family=flowchart,
  prefix=flowchart@,
  setkeys=\kvsetkeys
}
%    \end{macrocode}
%
% 定义调试状态参数(布尔类型)。
%    \begin{macrocode}
\DeclareBoolOption[false]{debug}
%    \end{macrocode}
%
% 参数解析，获取定义的宏包参数。
%    \begin{macrocode}
\DeclareDefaultOption{}
\kvsetkeys{flowchart}{}
\ProcessKeyvalOptions*
%    \end{macrocode}

% 载入需要的\tkz{}宏包运行库。
%    \begin{macrocode}
\usetikzlibrary{
  arrows.meta,      % 箭头形状
  shapes.geometric, % 几何形状
  chains,           % 链式布局
  calc,             % 坐标计算
}
%    \end{macrocode}
%
% \subsection{配置命令}
% 为|\flowchartset|命令定义一个|pgfkeys|族，所有配置参数(例如：
% \meta{norm color}等)都会存储在|/flowchart|PGF键中。这能够确保这些配
% 置参数不会覆盖别的同类参数。
%    \begin{macrocode}
\pgfkeys{
  /flowchart/.is family,
  /flowchart/.search also={/tikz},
}

\def\flowchartset{\pgfqkeys{/flowchart}}
%    \end{macrocode}
% 然后，定义存储这些参数值的宏命令。
%    \begin{macrocode}
\flowchartset{
  free color/.store in = \freecolor, % 自由连线颜色
  norm color/.store in = \normcolor, % 常规连线颜色
  cong color/.store in = \congcolor, % 关联连线颜色
  proc fill color/.store in = \procfillcolor, % 顺序处理框填充颜色
  test fill color/.store in = \testfillcolor, % 判断框填充颜色
  io fill color/.store in = \iofillcolor, % 输入/输出框填充颜色
  term fill color/.store in = \termfillcolor, % 开始/结束框填充颜色
  proc text width/.store in = \proctxtwd, % 顺序处理框宽度
  test text width/.store in = \testtxtwd, % 判断框宽度
  io text width/.store in = \iotxtwd, % 输入/输出框宽度
  term text width/.store in = \termtxtwd, % 开始/结束宽度
  chain direction/.store in = \chaindir, % 结点自动布置方向
  minimum node distance/.store in = \minnodedis, % 最小结点间距
  maximum node distance/.store in = \maxnodedis, % 最大结点间距
  border line width/.store in = \bdlinewd, % 各类流程框边框宽度
  flow line width/.store in = \flowlinewd, % 各类流程线线条宽度
  stealth length/.store in = \stealthlen, % 箭头长度
  stealth width/.store in = \stealthwd, % 箭头宽度
}
%    \end{macrocode}
%
% \subsection{默认参数值}
% 为各个参数设置默认值以确保预设的各个宏的值有效，这些值可以由用户单独
% 进行修改，修改后的值会覆盖参数默认值。
%    \begin{macrocode}
\flowchartset{
  free color = green, % 自由连线颜色(默认取green)
  norm color = blue, % 常规连线颜色(默认取blue)
  cong color = red, % 关联连线颜色(默认取red)
  proc fill color = white, % 顺序处理框填充颜色(默认取白色)
  test fill color = white, % 判断框填充颜色(默认取白色)
  io fill color = white, % 输入/输出框填充颜色(默认取白色)
  term fill color = white, % 开始/结束框填充颜色(默认取白色)
  proc text width = 8em, % 顺序处理框宽度(默认取8em)
  test text width = 5em, % 判断框宽度(默认取5em)
  io text width = 6em, % 输入/输出框宽度(默认取6em)
  term text width = 3em, % 开始/结束宽度(默认取3em)
  chain direction = below, % 结点自动布置方向(默认取below)
  minimum node distance = 6mm, % 最小结点间距(默认取6mm)
  maximum node distance = 60mm, % 最大结点间距(默认取60mm)
  border line width = \pgflinewidth, % 各类流程框边框宽度(默认取当前线条宽度)
  flow line width = \pgflinewidth, % 各类流程线线条宽度(默认取当前线条宽度)
  stealth length = 1.5mm, % 箭头长度(默认取1.5mm)
  stealth width = 1.0mm, % 箭头宽度(默认取1.0mm)
}
%    \end{macrocode}
%
% \subsection{样式定义}
% 以下是所有绘制流程图中需要的样式定义。
%    \begin{macrocode}
\tikzset{
%    \end{macrocode}
% 首先，定义结点布局方式：
%    \begin{macrocode}
  start chain = going \chaindir,    % 结点自动布置方向(默认取below)
  node distance = \minnodedis and \maxnodedis, % 结点间距
  every join/.style = {norm},   % 默认自动连接线的连线样式
%    \end{macrocode}
% 其次，定义基础绘图样式：
%    \begin{macrocode}
  % 流程框样式的基础样式
  base/.style = {line width = \bdlinewd, % 边框线宽
                 draw,                   % 绘制边框
                 on chain,               % 沿布局方向绘制
                 on grid,                % 沿网格布局
                 align=center,           % 内容居中对齐
                 minimum height=2ex,      % 流程框最小高度
                },
%    \end{macrocode}
% 接下来，定义|proc|、|test|、|io|、|term|四个|\textbackslash node|命令
% 的绘图样式：
%    \begin{macrocode}
  % 顺序处理框样式
  proc/.style={base,           % 基础样式  
               rectangle,      % 矩形边框
               text width=\proctxtwd, % 最大文本宽度(超过会自动换行)
               fill=\procfillcolor, % 填充色
              },
  % 判断框样式
  test/.style={base,           % 基础样式
               diamond,        % 菱形边框
               aspect=2.5,       % 长高比例
               text width=\testtxtwd, % 最大文本宽度(超过会自动换行)
               fill=\testfillcolor, % 填充色
              },
  % 输入/输出框样式
  io/.style={base,                      % 基础样式
             trapezium,                 % 平行四边形
             trapezium left angle=70,   % 平行四边形左倾角
             trapezium right angle=110, % 平行四边形右倾角
             text width=\iotxtwd,            % 最大文本宽度(超过会自动换行)
             fill=\iofillcolor, % 填充色
            },
  % 开始/结束框样式
  term/.style={proc,            % 基于proc样式
               rounded corners=2.0mm, % 为矩形添加圆角属性
               text width=\termtxtwd, % 最大文本宽度(超过会自动换行) 
               fill=\termfillcolor, % 填充色
              },
%    \end{macrocode}
% 再下来，定义流程线交点绘制样式：
%    \begin{macrocode}
  % 流程连接点样式
  connector/.style = {draw,              % 绘制边框
                      circle,            % 圆形
                      node distance=3cm, % 节点间距
                     },
  % 绕接连线点样式(不相交的两个交汇路径)
  connect/.style args={(#1) to (#2) over (#3) by #4}{
    insert path={
      let \p1=($(#1)-(#3)$), \n1={veclen(\x1,\y1)}, 
        \n2={atan2(\y1,\x1)}, \n3={abs(#4)}, \n4={#4>0 ?-180:180}  in 
        (#1) -- ($(#1)!\n1-\n3!(#3)$) arc (\n2:\n2+\n4:\n3) -- (#2)
    }
  }, 
%    \end{macrocode}
% 还需要定义流程线转角点|node|命令样式：
%    \begin{macrocode}
  % coord结点样式(用于布置流程线连接点)
  coord/.style={coordinate,                 % 笛卡尔坐标系
                %on chain,                   % 沿布局方向绘制
                %on grid,                    % 沿网格布局
                node distance=6mm and 25mm, % 节点间距
               },
%    \end{macrocode}
% 为|cmark|调试标记命令绘制样式：
%    \begin{macrocode}
  % nmark结点样式(用于布置调试坐标标记点)
  nmark/.style={draw,                           % 绘制边框
                cyan,                           % 青色
                circle,                         % 圆形
                font={\sffamily\bfseries}, % 字体
               },  
%    \end{macrocode}
% 另外，需要定义各类流程线绘制样式：
%    \begin{macrocode}
  % -------------------------------------------------
  % 无箭头连线样式
  lnorm/.style={line width = \flowlinewd,  % 线宽
                draw,                      % 绘制
                \normcolor,                % 颜色
               },
  lfree/.style={line width = \flowlinewd, 
                draw, 
                \freecolor,
               },
  lcong/.style={line width = \flowlinewd, 
                draw, 
                \congcolor,
               },
  % 流程线实心交点样式
  dotnorm/.style={draw,              % 绘制
                  fill = \normcolor, % 填充颜色
                  \normcolor,        % 颜色
                 },
  dotfree/.style={draw, 
                  fill = \freecolor, 
                  \freecolor,
                 },
  dotcong/.style={draw, 
                  fill = \congcolor, 
                  \congcolor,
                 },
  % 流程线空心交点样式
  cdotnorm/.style={draw,       % 绘制 
                   \normcolor, % 颜色
                  },
  cdotfree/.style={draw, 
                   \freecolor,
                  },
  cdotcong/.style={draw, 
                   \congcolor,
                  },
  % 带箭头连线样式
  norm/.style={line width = \flowlinewd,     % 线宽
               -{Stealth[length=\stealthlen, % 箭头长度
                         width=\stealthwd,   % 箭头宽度
                        ]
                }, 
               draw,                        % 绘制 
               \normcolor,                  % 颜色
              },
  free/.style={line width = \flowlinewd, 
               -{Stealth[length=\stealthlen, 
                         width=\stealthwd,
                        ]
                },
               draw, 
               \freecolor,
              },
  cong/.style={line width = \flowlinewd, 
               -{Stealth[length=\stealthlen, 
                         width=\stealthwd,
                        ]
                }, 
               draw, 
               \congcolor,
              },
%    \end{macrocode}
% 最后，再定义一个流程线标注文本样式：
%    \begin{macrocode}
  % 斜体字样式
  it/.style={font={\small\itshape}},
}
%    \end{macrocode}
%
% \subsection{调试命令定义}
% 为便于绘制过程中，能够直观连接各个流程线转角点，定义|cmark|命令，以绘制转角点标记。
%    \begin{macrocode}
%% 判断是否为宏包传入了debug参数以打开调试功能，若没有传入debug参数，则关闭调试功能。
\ifflowchart@debug
%    \end{macrocode}
% 传入了debug参数，创建用于调试的图层。
%    \begin{macrocode}
  % 设置一个用于调试的标记符号图层，注意确保这一图层位于顶层
  \pgfdeclarelayer{marx}
  \pgfsetlayers{main,marx}
%    \end{macrocode}
% 定义|\textbackslash cmark|命令。
%    \begin{macrocode}
  \newcommand{\cmark}[2][]{%
  \begin{pgfonlayer}{marx}
    \node [nmark] at (c#2#1) {#2};
  \end{pgfonlayer}{marx}
  } 
%    \end{macrocode}
% 未传入了debug参数，定义一个空的|cmark|命令。
%    \begin{macrocode}
\else
  \newcommand{\cmark}[2][]{\relax}
\fi
%    \end{macrocode}
% \Finale
\endinput

% \endinput
% Local Variables:
% mode: doctex
% TeX-master: t
% End:
